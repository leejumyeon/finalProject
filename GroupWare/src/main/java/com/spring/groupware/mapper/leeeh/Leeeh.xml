<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="leeeh">

	<!-- === 사원 발급을 하기위해 사원 ID에서 max값을 가져오기 === -->
	<select id="getMaxOfEmployeeId" parameterType="String" resultType="String">
		select nvl(max(substr(employee_id, 14)), '00')
		from employees_table
		where substr(employee_id, 5, 8) = #{hireDate}
	</select>
	
	<!-- === 사원 발급을 하기 위해 부서리스트를 가져오기 === -->
	<select id="departmentList" resultType="com.spring.groupware.commonVO.DepartmentVO">
		select department_seq, department_name
		from department_table
	</select>
	
	<!-- === 사원발급에서 테이블에 집어 넣기 === -->
	<insert id="insertEmployeeTable" parameterType="HashMap">
		insert into employees_table(employee_seq, employee_name, employee_id, employee_pw, email, phone, fk_position, fk_department, gender, birthday, address, postcode, detailaddress, extraaddress)
		values(employees_table_seq.nextval, #{employee_name}, #{employee_id}, #{employee_pw}, #{email}, #{phone}, #{position_seq}, #{department_seq}, #{gender}, #{birthday}, #{address}, #{postcode}, #{detailaddress}, #{extraaddress})
	</insert>
	
	<!-- === 로그인 페이지에서 적은 ID와 비밀번호를 통해 유저가 존재하는지 검사하기 === -->
	<select id="isUserExist" resultType="com.spring.groupware.commonVO.EmployeesVO">
		select V.employee_seq, V.employee_name, V.employee_id, V.email, V.phone, V.hire_date, V.position_name, D.department_name, V.gender
		     , V.birthday, V.address, V.postcode, V.detailaddress, V.extraaddress, V.grade
		from
		(
		select E.employee_seq, E.employee_name, E.employee_id, E.employee_pw, E.email, E.phone, E.hire_date, P.position_name, E.fk_department, E.gender
		     , E.birthday, E.address, E.postcode, E.detailaddress, E.extraaddress, E.grade, E.fk_status
		from employees_table E join position_table P
		on E.fk_position = P.position_seq
		) V join department_table D
		on V.fk_department = D.department_seq
		where V.fk_status != 2 and V.fk_status != 3
		      and V.employee_id = #{employee_id}
		      and V.employee_pw = #{employee_pw}
	</select>
	
	<!-- === 문서 결재 카테고리 알아오기 === -->
	<select id="documentCategoryList" resultType="com.spring.groupware.commonVO.DocumentCategoryVO">
		select document_category_seq, category_name
		from document_category
	</select>
	
	<!-- === 문서 결재를 하기위해 문서번호에서 max값을 가져오기 === -->
	<select id="getMaxOfGroupno" parameterType="String" resultType="String">
		select nvl(max(substr(groupno, 12)), '00')
		from document_table
		where substr(groupno, 4, 8) = #{regDate}
	</select>
	
	<!-- === 문서 결재 작성 페이지에서 사원들 정보 불러오기 === -->
	<select id="showMemberByDepartment" parameterType="HashMap" resultType="com.spring.groupware.commonVO.EmployeesVO">
		select V.employee_seq, V.employee_name, V.employee_id, V.email, V.phone, V.hire_date, V.position_name, D.department_name, V.gender
		     , V.birthday, V.address, V.postcode, V.detailaddress, V.extraaddress, V.grade
		from
		(
		select E.employee_seq, E.employee_name, E.employee_id, E.employee_pw, E.email, E.phone, E.hire_date, P.position_name, E.fk_department, E.gender
		     , E.birthday, E.address, E.postcode, E.detailaddress, E.extraaddress, E.grade, E.fk_status
		from employees_table E join position_table P
		on E.fk_position = P.position_seq
		where E.fk_department = #{seq}
		) V join department_table D
		on V.fk_department = D.department_seq
		where V.fk_status != 2 and V.fk_status != 3 and employee_seq != #{employee_seq}
	</select>
	
	<!-- === 클릭한 사원들 결재선에 올리기 === -->
	<select id="approvalList" parameterType="HashMap" resultType="com.spring.groupware.commonVO.EmployeesVO">
		select V.employee_seq, V.employee_name, V.employee_id, V.email, V.phone, V.hire_date, V.position_name, D.department_name, V.gender
		     , V.birthday, V.address, V.postcode, V.detailaddress, V.extraaddress, V.grade
		from
		(
		select E.employee_seq, E.employee_name, E.employee_id, E.employee_pw, E.email, E.phone, E.hire_date, E.fk_position, P.position_name, E.fk_department, E.gender
		     , E.birthday, E.address, E.postcode, E.detailaddress, E.extraaddress, E.grade, E.fk_status
		from employees_table E join position_table P
		on E.fk_position = P.position_seq
		where E.employee_seq in
		<foreach collection="seqArr" index="i" open="(" separator="," close=")">
			'${seqArr[i]}'
		</foreach>
		) V join department_table D
		on V.fk_department = D.department_seq
		order by V.fk_position asc, V.grade asc
	</select>
	
	<!-- === 휴가 종류 받아오기 === -->
	<resultMap type="HashMap" id="tripCatMapOfVacation">
		<result property="category_num" column="category_num" javaType="String"/>
		<result property="category_name" column="category_name" javaType="String"/>
	</resultMap>
	<select id="tripCatListOfVacation" resultMap="tripCatMapOfVacation">
		select category_num, category_name
		from trip_category
		where category_num not in ('6', '7', '8')
	</select>
	
	<!-- === 휴가 종류 받아오기 === -->
	<resultMap type="HashMap" id="tripCatMapOfBusiness">
		<result property="category_num" column="category_num" javaType="String"/>
		<result property="category_name" column="category_name" javaType="String"/>
	</resultMap>
	<select id="tripCatListOfBusiness" resultMap="tripCatMapOfBusiness">
		select category_num, category_name
		from trip_category
		where category_num in ('6', '7', '8')
	</select>
	
	<!-- === 문서 결재 테이블에 정보 집어 넣기 === -->
	<insert id="insertDocumentTable" parameterType="com.spring.groupware.commonVO.DocumentVO">
		<if test='parent_approver != ""'>
			<if test='fileName != ""'>
				insert into document_table(document_seq, groupno, fk_employee_seq, subject, content, approver_seq, fileName, orgFileName, fileSize, parent_approver, document_category)
				values(document_table_seq.nextval, #{groupno}, #{fk_employee_seq}, #{subject}, #{content}, #{approver_seq}, #{fileName}, #{orgFileName}, #{fileSize}, #{parent_approver}, #{document_category})
			</if>
			<if test='fileName == ""'>
				insert into document_table(document_seq, groupno, fk_employee_seq, subject, content, approver_seq, fileName, orgFileName, fileSize, parent_approver, document_category)
				values(document_table_seq.nextval, #{groupno}, #{fk_employee_seq}, #{subject}, #{content}, #{approver_seq}, '', '', '', #{parent_approver}, #{document_category})
			</if>
		</if>
		<if test='parent_approver == ""'>
			<if test='fileName != ""'>
				insert into document_table(document_seq, groupno, fk_employee_seq, subject, content, approver_seq, fileName, orgFileName, fileSize, parent_approver, document_category)
				values(document_table_seq.nextval, #{groupno}, #{fk_employee_seq}, #{subject}, #{content}, #{approver_seq}, #{fileName}, #{orgFileName}, #{fileSize}, '', #{document_category})
			</if>
			<if test='fileName == ""'>
				insert into document_table(document_seq, groupno, fk_employee_seq, subject, content, approver_seq, fileName, orgFileName, fileSize, parent_approver, document_category)
				values(document_table_seq.nextval, #{groupno}, #{fk_employee_seq}, #{subject}, #{content}, #{approver_seq}, '', '', '', '', #{document_category})
			</if>
		</if>
	</insert>
	
	<!-- === 휴가 정보를 휴가/출장 테이블에 집어 넣기 === -->
	<insert id="insertTripTableOfVacation" parameterType="HashMap">
		insert into trip_table(trip_seq, groupno, trip_category, reason, trip_start, trip_end, triplocation, fk_employee_seq, documentStatus)
		values(trip_table_seq.nextval, #{groupno}, #{trip_category}, #{reason}, to_date(#{trip_start}, 'yyyy. mm. dd'), to_date(#{trip_start}, 'yyyy. mm. dd') + 1, '', ${fk_employee_seq}, default)
	</insert>
	
	<!-- === 출장 정보를 휴가/출장 테이블에 집어 넣기 === -->
	<insert id="insertTripTableOfBusiness" parameterType="HashMap">
		insert into trip_table(trip_seq, groupno, trip_category, reason, trip_start, trip_end, triplocation, fk_employee_seq, documentStatus)
		values(trip_table_seq.nextval, #{groupno}, #{trip_category}, #{reason}, to_date(#{trip_start}, 'yyyy. mm. dd'), to_date(#{trip_start}, 'yyyy. mm. dd') + 1, #{triplocation}, ${fk_employee_seq}, default)
	</insert>
	
	<!-- === 매출 정보를 매출 테이블에 집어 넣기 === -->
	<insert id="insertSalesTable" parameterType="HashMap">
		insert into sales_table(sales_seq, groupno, sales_title, sales_price, sales_count, reason, fk_department_seq, regDate, documentStatus)
		values(sales_table_seq.nextval, #{groupno}, #{sales_title}, #{price}, #{sales_count}, #{reason}, #{fk_department_seq}, default, default)
	</insert>
	
	<!-- === 비품 구매 정보를 배품 테이블에 집어 넣기 === -->
	<insert id="insertEquipmentTable" parameterType="HashMap">
		insert into equipment_table(equipment_seq, fk_department_seq, equipment_name, unit, equipment_price, equipment_count, reason, purchaseDate, groupno, documentStatus)
		values(equipment_table_seq.nextval, #{fk_department_seq}, #{equipment_name}, #{unit}, #{equipment_price}, #{equipment_count}, #{reason}, to_date(#{purchaseDate}, 'yyyy. mm. dd'), #{groupno}, default)
	</insert>
	
	<!-- === 프로젝트 seq번호 체번해오기 === -->
	<select id="getProjectSeq" resultType="String">
		select project_table_seq.nextval AS project_seq
		from dual
	</select>
	
	<!-- === 프로젝트 정보를 프로젝트 테이블에 집어 넣기 === -->
	<insert id="insertProjectTable" parameterType="HashMap">
		insert into project_table(project_seq, groupno, project_name, content, term, startDate, manager, memberCount, reason, status, downPayment, middlePayment, completionPayment, documentStatus)
		values(#{project_seq}, #{groupno}, #{project_name}, #{content}, #{term}, #{startDate}, #{manager}, #{memberCount}, '', default, #{downPayment}, #{middlePayment}, #{completionPayment}, default)
	</insert>
	
	<!-- === 프로젝트 명단에 들어갈 사원 번호 받아오기 === -->
	<select id="getEmployeeSeq" parameterType="HashMap" resultType="String">
		select employee_seq
		from employees_table
		where fk_department = #{department_seq} and fk_position = #{position_seq} and employee_name = #{employee_name}
	</select>
	
	<!-- === 사원 ID로 사원 번호 알아오기 === -->
	<select id="getEmployeeSeqByEmployeeId" parameterType="String" resultType="String">
		select employee_seq
		from employees_table
		where employee_id = #{employee_id}
	</select>
	
	<!-- === 프로젝트 명단에 집어 넣기 === -->
	<insert id="insertProjectMemberTable" parameterType="HashMap">
		insert into projectMember_table(projectMember_seq, fk_project_seq, fk_employee_seq)
		values(projectMember_table_seq.nextval, #{project_seq}, #{employee_seq})
	</insert>
	
	<!-- === 프로젝트 중단 정보를 프로젝트 테이블에 업데이트 하기 === -->
	<update id="updateProjectTable" parameterType="HashMap">
		update project_table set term = #{term}, reason = #{reason}, middlePayment = #{middlePayment}
		where project_name = #{project_name}
	</update>
	
	<!-- === 프로젝트 중단 정보를 프로젝트 테이블에 업데이트 하기 === -->
	<update id="updateProjectTableEnd" parameterType="HashMap">
		update project_table set term = #{term}, content = #{content}, completionPayment = #{completionPayment}
		where project_name = #{project_name}
	</update>
	
	<!-- === 퇴사 정보를 퇴사 테이블에 집어 넣기 === -->
	<insert id="insertFireTable" parameterType="HashMap">
		insert into fire_table(fk_employee_seq, groupno, reason, interviewer_seq, interview_content, documentStatus)
		values(#{fk_employee_seq}, #{groupno}, #{reason}, #{interviewer_seq}, #{interview_content}, default)
	</insert>
	
	<!-- === 근태 정보를 근태관리 테이블에 집어 넣기 === -->
	<insert id="insertTATable" parameterType="HashMap">
		insert into TA_table(ta_seq, groupno, fk_employee_seq, attendance, attitude, performance, manager, reason, regDate, documentStatus)
		values(ta_table_seq.nextval, #{groupno}, #{fk_employee_seq}, #{attendance}, #{attitude}, #{performance}, #{manager}, #{reason}, default, default)
	</insert>
	
	<!-- === 동호회 정보를 종호회 테이블에 집어 넣기 === -->
	<insert id="insertClubTable" parameterType="HashMap">
		insert into club_table(club_seq, groupno, club_name, club_info, regDate, documentStatus, representative_img)
		values(#{club_seq}, #{groupno}, #{club_name}, #{club_info}, default, default, #{newFileName})
	</insert>
	
	<!-- === 클럽 모두 가져오기 === -->
	<select id="clubList" resultType="com.spring.groupware.commonVO.ClubVO">
		select club_seq, club_name
		from club_table
	</select>
	
	<!-- === 동호회 명단 정보 테이블에 집어 넣기 === -->
	<insert id="insertClubMemberTable" parameterType="HashMap">
		insert into clubMember_table(member_seq, groupno, fk_club, status, regDate, fk_employee_seq, documentStatus)
		values(clubMember_table_seq.nextval, #{groupno}, #{club_seq}, default, default, #{employee_seq}, default)
	</insert>
	
	<!-- === 클럽 번호 채번해오기 === -->
	<select id="getClubSeq" resultType="String">
		select club_table_seq.nextval
		from dual
	</select>
	
	<!-- === 클럽 회장 정보 넣기 === -->
	<insert id="insertClubMemberTableOfManager" parameterType="HashMap">
		insert into clubMember_table(member_seq, groupno, fk_club, status, regDate, fk_employee_seq, documentStatus)
		values(clubMember_table_seq.nextval, #{groupno}, #{club_seq}, '1', default, #{fk_employee_seq}, default)
	</insert>
	
	<!-- === 클럽 지우기 === -->
	<update id="deleteClub" parameterType="HashMap">
		update club_table set groupno = #{groupno}, documentStatus = 0
		where club_seq = #{club_seq}
	</update>
	
	<!-- === 문서 결재 신청자의 List 얻어오기 === -->
	<select id="regDocumentList" parameterType="String" resultType="com.spring.groupware.commonVO.DocumentVO">
		select D.document_seq, D.groupno, D.subject, to_char(D.regDate, 'yyyy. mm. dd') AS regDate, E.employee_name, DC.category_name
		from employees_table E join document_table D
		on E.employee_seq = D.fk_employee_seq
		join document_category DC
		on D.document_category = DC.document_category_seq
		where fk_employee_seq = #{fk_employee_seq} and parent_approver is null
		      and groupno in (select groupno from document_table group by groupno having sum(status) != count(status))
		order by document_seq desc
	</select>
	
	<!-- === 문서 상세 내용 보여주기 === -->
	<resultMap type="HashMap" id="documentMap">
		<result property="document_seq" column="document_seq" javaType="String"/>
		<result property="groupno" column="groupno" javaType="String"/>
		<result property="content" column="content" javaType="String"/>
		<result property="regDate" column="regDate" javaType="String"/>
		<result property="department_name" column="department_name" javaType="String"/>
		<result property="employee_name" column="employee_name" javaType="String"/>
		<result property="category_name" column="category_name" javaType="String"/>
	</resultMap>
	<select id="goDocumentContent" parameterType="String" resultMap="documentMap">
		select D.document_seq, D.groupno, D.content, to_char(D.regDate, 'yyyy. mm. dd') AS regDate, DE.department_name, E.employee_name, DC.category_name
		from department_table DE join employees_table E  
		on DE.department_seq = E.fk_department
		join document_table D
		on E.employee_seq = D.fk_employee_seq
		join document_category DC
		on D.document_category = DC.document_category_seq
		where D.document_seq = #{document_seq}
	</select>
	
	<!-- === 문서 결재자들 알아오기 === -->
	<select id="getApproverList" parameterType="String" resultType="com.spring.groupware.commonVO.DocumentVO">
		select D.approver_seq, D.status, E.employee_name AS approver_name, DE.department_name AS approver_department, P.position_name AS approver_position
		from document_table D join employees_table E
		on D.approver_seq = E.employee_seq
		join department_table DE
		on E.fk_department = DE.department_seq
		join position_table P
		on E.fk_position = P.position_seq
		where groupno = #{groupno}
	</select>
	
	<!-- === 문서 결재 받는 사람의 List 얻어오기 === -->
	<select id="aproDocumentList" parameterType="String" resultType="com.spring.groupware.commonVO.DocumentVO">
		select D.document_seq, D.groupno, D.subject, to_char(D.regDate, 'yyyy. mm. dd') AS regDate, E.employee_name, DC.category_name
		from employees_table E join document_table D
		on E.employee_seq = D.fk_employee_seq
		join document_category DC
		on D.document_category = DC.document_category_seq
		where D.approver_seq = #{fk_employee_seq} and D.parent_approver is null
			  and status = '0'
			  and groupno in (select groupno from document_table group by groupno having sum(status) != count(status))
		UNION
		select D.document_seq, D.groupno, D.subject, to_char(D.regDate, 'yyyy. mm. dd') AS regDate, E.employee_name, DC.category_name
		from employees_table E join document_table D
		on E.employee_seq = D.fk_employee_seq
		join document_category DC
		on D.document_category = DC.document_category_seq
		where D.approver_seq = #{fk_employee_seq} and D.parent_approver is not null
			  and groupno in (select groupno from document_table where approver_seq in (select parent_approver from document_table where approver_seq = #{fk_employee_seq}) and status = '1')
			  and status = '0'
		      and groupno in (select groupno from document_table group by groupno having sum(status) != count(status))
	</select>
	
	<!-- === 신청 완료된 전체 문서 보여주기 === -->
	<select id="allComDocumentList" parameterType="String" resultType="com.spring.groupware.commonVO.DocumentVO">
		select V.document_seq, V.groupno, V.subject, V.regDate, V.employee_name, V.category_name
		from
		(
			select D.document_seq, D.groupno, D.subject, to_char(D.regDate, 'yyyy. mm. dd') AS regDate, E.employee_name, DC.category_name
				 , D.fk_employee_seq, D.approver_seq, D.parent_approver
			from employees_table E join document_table D
			on E.employee_seq = D.fk_employee_seq
			join document_category DC
			on D.document_category = DC.document_category_seq
			where groupno in (select groupno from document_table group by groupno having sum(status) = count(status))
		) V
		where (V.fk_employee_seq = #{fk_employee_seq} and V.parent_approver is null) or V.approver_seq = #{fk_employee_seq}
	</select>
	
	<!-- === 신청 완료된 신청한 문서 보여주기 === -->
	<select id="senComDocumentList" parameterType="String" resultType="com.spring.groupware.commonVO.DocumentVO">
		select D.document_seq, D.groupno, D.subject, to_char(D.regDate, 'yyyy. mm. dd') AS regDate, E.employee_name, DC.category_name
		from employees_table E join document_table D
		on E.employee_seq = D.fk_employee_seq
		join document_category DC
		on D.document_category = DC.document_category_seq
		where D.fk_employee_seq = #{fk_employee_seq} and D.parent_approver is null and groupno in (select groupno from document_table group by groupno having sum(status) = count(status))
	</select>
	
	<!-- === 신청 완료된 결재한 문서 보여주기 === -->
	<select id="recComDocumentList" parameterType="String" resultType="com.spring.groupware.commonVO.DocumentVO">
		select D.document_seq, D.groupno, D.subject, to_char(D.regDate, 'yyyy. mm. dd') AS regDate, E.employee_name, DC.category_name
		from employees_table E join document_table D
		on E.employee_seq = D.fk_employee_seq
		join document_category DC
		on D.document_category = DC.document_category_seq
		where D.approver_seq = #{fk_employee_seq} and groupno in (select groupno from document_table group by groupno having sum(status) = count(status))
	</select>
	
	<!-- === 결재 반려 테이블에 status 업데이트 하기 === -->
	<update id="updateStatusDocmenetTable" parameterType="HashMap">
		<foreach collection="document_seqArr" index="i">
			update document_table set status = '-1'
			where document_seq = #{document_seqArr[i]}
		</foreach>
	</update>
	
	<!-- === 결재번호로 groupno와 cateory_seq 알아오기 === -->
	<select id="getDocumentList" parameterType="HashMap" resultType="com.spring.groupware.commonVO.DocumentVO">
		select groupno, document_catogory
		from document_table
		where document_seq in
		<foreach collection="document_seqArr" index="i" open="(" separator="," close=")">
			#{document_seqArr[i]}
		</foreach>
	</select>
	
	<!-- === 반려된 휴가/출장 정보 삭제하기 === -->
	<delete id="deleteTripTable" parameterType="String">
		delete from trip_table;
		where groupno = #{groupno}
	</delete>
	
	<!-- === 반려된 매출 정보 삭제하기 === -->
	<delete id="deleteSalesTable" parameterType="String">
		delete from sales_table;
		where groupno = #{groupno}
	</delete>
	
	<!-- === 반려된 비품 구매 정보 삭제하기 === -->
	<delete id="deleteEquipmentTable" parameterType="String">
		delete from equipment_table;
		where groupno = #{groupno}
	</delete>
	
	<!-- === 반려된 프로젝트 정보 삭제하기 === -->
	<delete id="deleteProjectTable" parameterType="String">
		delete from project_table;
		where groupno = #{groupno}
	</delete>
	
	<!-- === 반려된 퇴사 정조 삭제하기 === -->
	<delete id="deleteFireTable" parameterType="String">
		delete from fire_table;
		where groupno = #{groupno}
	</delete>
	
	<!-- === 반려된 인사고과 정보 삭제하기 === -->
	<delete id="deleteTATable" parameterType="String">
		delete from TA_table;
		where groupno = #{groupno}
	</delete>
	
	<!-- === 반려된 동호회 정보 삭제하기 === -->
	<delete id="deleteClubTable" parameterType="String">
		delete from club_table;
		where groupno = #{groupno}
	</delete>
	
	<!-- === 반려된 동호회 회원 정보 삭제하기 === -->
	<delete id="deleteClubMemberTable" parameterType="String">
		delete from clubMember_table;
		where groupno = #{groupno}
	</delete>
	
	<!-- === 결재 완료 테이블에 status 업데이트 하기 === -->
	<update id="updateStatusDocmenetTable2" parameterType="HashMap">
		<foreach collection="document_seqArr" index="i">
			update document_table set status = 1
			where document_seq = '${document_seqArr[i]}'
		</foreach>
	</update>
	
	<!-- === 전체 결재 완료된 groupno와 cateory_seq 알아오기 === -->
	<select id="getDocumentList2" parameterType="HashMap" resultType="com.spring.groupware.commonVO.DocumentVO">
		select groupno, document_category
		from document_table
		where document_seq in
		<foreach collection="document_seqArr" index="i" open="(" separator="," close=")">
			'${document_seqArr[i]}'
		</foreach>
			  and groupno in (select groupno from document_table group by groupno having sum(status) = count(status))
	</select>
	
	<!-- === 전체 결재 완료된 테이블 documentStatus 업데이트하기 === -->
	<update id="updateDocumentStatus" parameterType="HashMap">
		update
		<choose>
			<when test='document_category == "1"'>
				trip_table set documentStatus = '1'
			</when>
			<when test='document_category == "2"'>
				trip_table set documentStatus = '1'
			</when>
			<when test='document_category == "3"'>
				sales_table set documentStatus = '1'
			</when>
			<when test='document_category == "4"'>
				equipment_table set documentStatus = '1'
			</when>
			<when test='document_category == "5"'>
				project_table set documentStatus = '1'
			</when>
			<when test='document_category == "6"'>
				project_table set documentStatus = '1'
			</when>
			<when test='document_category == "7"'>
				project_table set documentStatus = '1'
			</when>
			<when test='document_category == "8"'>
				fire_table set documentStatus = '1'
			</when>
			<when test='document_category == "9"'>
				TA_table set documentStatus = '1'
			</when>
			<when test='document_category == "10"'>
				club_table set documentStatus = '1'
			</when>
			<when test='document_category == "11"'>
				clubMember_table set documentStatus = '1'
			</when>
		</choose>
		where groupno = #{groupno}
	</update>
	
	<!-- === 휴가/출장 테이블에서 사원번호 얻어오기 === -->
	<select id="employeeSeqTripTable" parameterType="HashMap" resultType="String">
		select fk_employee_seq
		from trip_table
		where groupno = #{groupno}
	</select>
	
	<!-- === 휴가를 간 사원의 status 값 변경하기 === -->
	<update id="updateStatusEmployeesTableVacation" parameterType="String">
		update employees_table set fk_status = '3'
		where employee_seq = #{employee_seq}
	</update>
	
	<!-- === 출장을 간 사원의 status 값 변경하기 === -->
	<update id="updateStatusEmployeesTableBusiness" parameterType="String">
		update employees_table set fk_status = '4'
		where employee_seq = #{employee_seq}
	</update>
</mapper>