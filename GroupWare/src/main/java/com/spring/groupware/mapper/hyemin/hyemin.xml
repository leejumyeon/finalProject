<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="hyemin">
	
	<!-- === 예약 가능한 시간 조회(Ajax) === -->
	<select id="select_possibleTime" parameterType="HashMap" resultType="com.spring.groupware.commonVO.ReservationVO">
		select E.employee_name as employee_name
			 , to_char(R.startDate, 'hh24:mi') as startDate
			 , to_char(R.endDate, 'hh24:mi') as endDate
			 , R.status as status
		from reservation_table R join employees_table E
		on R.fk_employee_seq = E.employee_seq
		where R.fk_roomNumber = #{fk_roomNumber} and to_char(R.startDate, 'yyyy. mm. dd') = #{rsvtDate}
	</select>
	
	<!-- === 검색어 입력 시 자동글 완성하기 6 === -->
	<resultMap type="HashMap" id="headMap">
		<result property="employee_seq" column="employee_seq" javaType="String" />
		<result property="searchResult" column="searchResult" javaType="String" />
	</resultMap>
	<select id="headSearchShow" parameterType="String" resultMap="headMap">
		select employee_seq, searchResult
		from
		(
			select distinct E.employee_seq
				 , E.employee_name || ' &lt;' || D.department_name || '/' || P.position_name || '&gt;' AS searchResult
			from department_table D join employees_table E
			on D.department_seq = E.fk_department
			join position_table P
			on E.fk_position = P.position_seq
		) V
		where lower(searchResult) like '%' || lower(#{searchHead}) || '%'		   
	</select>
	
	<!-- === 회의실 예약하기(insert) === -->
	<insert id="reserveRoomEnd" parameterType="HashMap">
		insert into reservation_table(reservation_seq, fk_employee_seq, fk_roomNumber, startDate, endDate, head_seq, memberCount, reason, status)
		values(reservation_table_seq.nextval, #{fk_employee_seq}, #{fk_roomNumber}, to_date(#{startDate}, 'yyyy. mm. dd hh24:mi'), to_date(#{endDate}, 'yyyy. mm. dd hh24:mi'), #{head_seq}, #{memberCount}, #{reason}, default)
	</insert>
	
	<!-- === 예약 신청 현황 조회(관리자)(Ajax) === -->
	<select id="waitingReservation" parameterType="HashMap" resultType="com.spring.groupware.commonVO.ReservationVO">
		select R.reservation_seq
		     , E.employee_name
		     , D.department_name
		     , P.position_name
		     , V.roomName
		     , to_char(R.startDate, 'yyyy.mm.dd hh24:mi') as startDate
		     , to_char(R.endDate, 'yyyy.mm.dd hh24:mi') as endDate
		     , HE.employee_name as head_name
		     , HD.department_name as head_department
		     , HP.position_name as head_position
		     , R.memberCount
		     , reason  
		     , to_char(R.regDate , 'yyyy.mm.dd hh24:mi:ss') as regDate
		from reservation_table R join employees_table E
		on R.fk_employee_seq = E.employee_seq
		join department_table D
		on E.fk_department = D.department_seq
		join position_table P
		on E.fk_position = P.position_seq
		join employees_table HE
		on R.head_seq = HE.employee_seq
		join department_table HD
		on HE.fk_department = HD.department_seq
		join position_table HP
		on HE.fk_position = HP.position_seq
		join reservationRoom_table V
		on R.fk_roomNumber = V.roomNumber
		where R.status = 0
		<if test="wPlaceType == ''"></if>
		<if test="wPlaceType == 'all'"></if>
		<if test="wPlaceType == 'small'">
			and R.fk_roomNumber in (5, 6, 7)
		</if>
		<if test="wPlaceType == 'medium'">
			and R.fk_roomNumber in (2, 3, 4)
		</if>
		<if test="wPlaceType == 'big'">
			and R.fk_roomNumber = 1
		</if>
		order by R.reservation_seq
	</select>
	
	<!-- === 예약 결과 현황 조회(관리자)(Ajax) === -->
	<select id="resultReservation" parameterType="HashMap" resultType="com.spring.groupware.commonVO.ReservationVO">
		select R.reservation_seq
		     , R.fk_employee_seq || '-' || E.employee_name as employee_name
		     , V.roomName
		     , to_char(R.startDate, 'yyyy.mm.dd hh24:mi') as startDate
		     , to_char(R.endDate, 'yyyy.mm.dd hh24:mi') as endDate
		     , R.head_seq || '-' || HE.employee_name as head_name
		     , R.memberCount
		     , R.status
		     , reason
		     , to_char(R.regDate , 'yyyy.mm.dd hh24:mi:ss') as regDate
		from reservation_table R join employees_table E
		on R.fk_employee_seq = E.employee_seq
		join employees_table HE
		on R.head_seq = HE.employee_seq
		join reservationRoom_table V
		on R.fk_roomNumber = V.roomNumber
		where 1=1
		<if test="resultType == ''">
			and R.status in (1, 2)
		</if>
		<if test="resultType == 'all'">
			and R.status in (1, 2)
		</if>
		<if test="resultType == 'approval'">
			and R.status = 1
		</if>
		<if test="resultType == 'disapproval'">
			and R.status = 2
		</if>
		<if test="rPlaceType == ''"></if>
		<if test="rPlaceType == 'all'"></if>
		<if test="rPlaceType == 'small'">
			and R.fk_roomNumber in (5, 6, 7)
		</if>
		<if test="rPlaceType == 'medium'">
			and R.fk_roomNumber in (2, 3, 4)
		</if>
		<if test="rPlaceType == 'big'">
			and R.fk_roomNumber = 1
		</if>
		order by R.reservation_seq desc
	</select>
	
	<!-- 예약 승인하기(관리자)(update) -->
	<update id="approveRoom" parameterType="String">
		 update reservation_table set status = 1
		 where reservation_seq = #{reservation_seq}
	</update>
	
	<!-- 글번호 채번하기 -->
	<select id="getBoard_seq" resultType="int">
		select board_table_seq.nextval
		from dual
	</select>
	
	<!-- 게시글 관리(공지사항 리스트)글 작성(관리자)(insert) -->
	<insert id="managerNoticeInsert" parameterType="HashMap">
		insert into board_table(board_seq, fk_category_num, subject, content, fk_employee_seq)
		values(#{fk_board_seq}, #{fk_category_num}, #{subject}, #{content}, #{fk_employee_seq})
	</insert>
	
	<!-- 게시글 관리(공지사항 리스트)글 작성 시 첨부파일 추가(관리자)(insert) -->
	<insert id="managerNoticeFileInsert" parameterType="com.spring.groupware.commonVO.AttachFileVO">
		insert into attachFile_table(file_seq, fk_board_seq, fileName, orgFileName, fileSize)
		values(attachFile_table_seq.nextval, #{fk_board_seq}, #{fileName}, #{orgFileName}, #{fileSize})
	</insert>
	
</mapper>