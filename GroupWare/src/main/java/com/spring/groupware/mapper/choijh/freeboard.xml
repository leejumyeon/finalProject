<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="freeboard">

	<!-- 글쓰기(첨부파일이 없는 경우) -->
	<insert id="add" parameterType="com.spring.groupware.commonVO.BoardVO">
		insert into board_table(board_seq, fk_category_num, subject, content, readCnt, regDate, fk_employee_seq, status, commentCnt)
		values(board_table_seq.nextval, #{fk_category_num}, #{subject}, #{content}, default, default, #{fk_employee_seq}, default, default)
	</insert>

	
	<!-- 게시판 글번호 채번해오기 -->
	<select id="getBordNum" resultType="int">
		select board_table_seq.nextval
		from dual
	</select>
	
	
	<!-- 글쓰기(첨부파일이 있는 경우) -->
	<insert id="add_withFile" parameterType="com.spring.groupware.commonVO.BoardVO">
		insert into board_table(board_seq, fk_category_num, subject, content, readCnt, regDate, fk_employee_seq, status, commentCnt)
		values(#{board_seq}, #{fk_category_num}, #{subject}, #{content}, default, default, #{fk_employee_seq}, default, default)
	</insert>
	
	
	<!-- 첨부파일 테이블 insert하기 -->
	<insert id="addFile" parameterType="com.spring.groupware.commonVO.AttachFileVO">
		insert into attachFile_table(file_seq, fk_board_seq, fileName, orgFileName, fileSize)
		values(attachFile_table_seq.nextval, #{fk_board_seq}, #{fileName}, #{orgFileName}, #{fileSize})
	</insert>
	
	
	<!-- 게시판 글 보여주기 -->
	<select id="boardlistView" resultType="com.spring.groupware.commonVO.BoardVO">
		select B.board_seq, E.employee_name, B.subject, B.content, B.readCnt, to_char(B.regDate, 'yyyy-mm-dd hh24:mi') AS regDate, B.commentCnt, B.fk_employee_seq
		from board_table B join employees_table E 
		on  B.fk_employee_seq = E.employee_seq
		where fk_category_num = 3
		order by B.board_seq desc 
	</select>
	
	
	<!-- 자유게시판 상세 글(이전글,다음글) 보여주기  -->
	<select id="detailView" parameterType="String" resultType="com.spring.groupware.commonVO.BoardVO">
   <!-- select B.board_seq, E.employee_name, B.subject, B.content, B.readCnt, to_char(B.regDate, 'yyyy-mm-dd hh24:mi') AS regDate, B.commentCnt, B.fk_employee_seq
		from board_table B join employees_table E 
		on  B.fk_employee_seq = E.employee_seq
		where fk_category_num = 3 and B.board_seq = #{board_seq} -->
		select previousseq, previoussubject
		     , board_seq, fk_employee_seq, E.employee_name, subject, content, readCnt, regDate
		     , nextseq, nextsubject
		from
		    (
		    select previousseq, previoussubject
		         , board_seq, fk_employee_seq, subject, content, readCnt, regDate
		         , nextseq, nextsubject
		    from
		    (    
		        select lag(board_seq, 1) over(order by board_seq desc) AS previousseq  
		             , lag(subject, 1) over(order by board_seq desc) AS previoussubject 
		           
		             , board_seq, fk_employee_seq, subject, content, readCnt
		             , to_char(regDate,'yyyy-mm-dd hh24:mi:ss') AS regDate
		          
		             , lead(board_seq, 1) over(order by board_seq desc) AS nextseq
		             , lead(subject, 1) over(order by board_seq desc) AS nextsubject
		        from board_table
		        where fk_category_num = 3
		    ) V
		    where V.board_seq = #{board_seq}
		    ) T join employees_table E
		on T.fk_employee_seq = employee_seq 
	</select>
	
	
	<!-- 글 조회수 1증가 하기 -->
	<update id="setAddReadCount" parameterType="String">
		update board_table set readCnt = readCnt + 1
		where board_seq = #{board_seq}
	</update>
	
	
	<!-- 해당게시글의 첨부파일 읽어오기 -->
	<select id="getfileView" parameterType="String" resultType="com.spring.groupware.commonVO.AttachFileVO">
		select file_seq, fk_board_seq, fileName, orgFileName, fileSize
		from attachFile_table
		where fk_board_seq = #{board_seq}
	</select>
	
	
	<!-- 자유게시판 글 삭제 -->
	<delete id="del" parameterType="String">
		delete from board_table 
		where board_seq = #{board_seq}
	</delete>
	
	
	<!-- 자유게시판 글 수정 하기  -->
	<update id="edit" parameterType="com.spring.groupware.commonVO.BoardVO">
		update board_table set subject = #{subject}, content = #{content}, regDate = sysdate
		where board_seq = #{board_seq}
	</update>
	
	
	<!-- 댓글쓰기 -->
	<insert id="addComment" parameterType="com.spring.groupware.commonVO.CommentVO">
		insert into comment_table(comment_seq, fk_board_seq, fk_employee_seq, readCnt, content, status, regDate, parent_seq, depthno)
		values(comment_table_seq.nextval, #{fk_board_seq}, #{fk_employee_seq}, default, #{content}, default, default, 0, default)
	</insert>
	<!-- 해당 댓글의 게시물에 댓글 수 증가 -->
	<update id="updateCommentCnt" parameterType="String">
		update board_table set commentCnt = commentCnt + 1
		where fk_category_num = 3 and board_seq = #{fk_board_seq} 
	</update>
	
	
	<!-- 댓글 내용(페이징처리 x) 보여주기 -->
	<select id="goReadComment" parameterType="String" resultType="com.spring.groupware.commonVO.CommentVO">
		<!-- select C.comment_seq, C.fk_board_seq, C.fk_employee_seq, C.readCnt, C.content, C.status, C.regDate, C.parent_seq, C.depthno, E.employee_name
		from comment_table C join employees_table E
		on   C.fk_employee_seq = E.employee_seq
		where fk_board_seq = #{fk_board_seq} -->
		
		<!-- 계층형 댓글 내용(페이징처리 x) 보여주기 -->
		select C.comment_seq, C.fk_board_seq, C.fk_employee_seq, C.readCnt, C.content, C.status, C.regDate, C.parent_seq, C.depthno, E.employee_name
		from comment_table C join employees_table E
		on   C.fk_employee_seq = E.employee_seq
		where fk_board_seq = #{fk_board_seq}
		start with parent_seq = 0
		connect by prior comment_seq = parent_seq
		order siblings by fk_board_seq desc, comment_seq asc
	</select>
	
	
	<!-- 댓글 내용(페이징처리 O) 보여주기 -->
	<select id="getCommentListPaging" parameterType="HashMap" resultType="com.spring.groupware.commonVO.CommentVO">
		select T.comment_seq, T.fk_board_seq, T.fk_employee_seq, T.readCnt, T.content, T.status, T.regDate, T.parent_seq, T.depthno, T.employee_name
		from
		(
		    select rownum AS rno, V.comment_seq, V.fk_board_seq, V.fk_employee_seq, V.readCnt, V.content, V.status, V.regDate, V.parent_seq, V.depthno, V.employee_name
		    from
		    (
		        select C.comment_seq, C.fk_board_seq, C.fk_employee_seq, C.readCnt, C.content, C.status, C.regDate, C.parent_seq, C.depthno, E.employee_name
		        from comment_table C join employees_table E
		        on   C.fk_employee_seq = E.employee_seq
		        where fk_board_seq = #{fk_board_seq}
		        start with parent_seq = 0
		        connect by prior comment_seq = parent_seq
		        order siblings by fk_board_seq desc, comment_seq asc
		    ) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	 
	 
	<!-- 원글 글번호에(parentSeq)에 해당하는 댓글의 총갯수를 알아오기 -->
	<select id="getCommentTotalPage" parameterType="HashMap" resultType="int">
		select count(*)
		from comment_table
		where fk_board_seq = #{fk_board_seq}
	</select>
	 
	
	<!-- 자유게시판 총 게시물 건수(totalCount) -->
	<select id="getTotalCount" parameterType="HashMap" resultType="int">
		select count(*)
		from board_table B join employees_table E 
		on  B.fk_employee_seq = E.employee_seq
		where fk_category_num = 3 
		<if test='searchWord != ""'>
			<if test='searchType == "all"'>
				and lower(subject) like '%'|| lower(#{searchWord}) ||'%' or 
				    lower(content) like '%'|| lower(#{searchWord}) ||'%' or
				    lower(employee_name) like '%'|| lower(#{searchWord}) ||'%'    
			</if>
			<if test='searchType != "all"'>
				and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
			</if>
			
		</if>
	</select>
	
	
	<!-- 페이징 처리한 글목록 가져오기(검색이 있든지, 검색이 없든지 모두 다 포함한것) -->
	<select id="boardListSearchWithPaging" parameterType="HashMap" resultType="com.spring.groupware.commonVO.BoardVO"> 
		select board_seq, fk_category_num, subject, content, readCnt, regDate, fk_employee_seq, status, commentCnt, employee_name
		from 
		(
			select row_number() over(order by board_seq desc) AS rno, 
			       board_seq, fk_category_num, subject, content,  
			       readCnt, to_char(regDate, 'yyyy-mm-dd hh24:mi') as regDate,
			       fk_employee_seq, status, commentCnt, employee_name
			from board_table B join employees_table E 
			on  B.fk_employee_seq = E.employee_seq
			where fk_category_num = 3
			<if test='searchWord != ""'>
				<if test='searchType == "all"'>
				and subject like '%'|| #{searchWord} ||'%' or 
				    content like '%'|| #{searchWord} ||'%' or
				    employee_name like '%'|| #{searchWord} ||'%'
				</if>
				<if test='searchType != "all"'>
				and ${searchType} like '%'|| #{searchWord} ||'%'
				</if>
			</if>
			
		) V
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	<!-- 자유게시판 댓글의 답글 쓰기 -->
	<insert id="addChildComment" parameterType="com.spring.groupware.commonVO.CommentVO">
		insert into comment_table(comment_seq, fk_board_seq, fk_employee_seq, readCnt, content, status, regDate, parent_seq, depthno)
		values(comment_table_seq.nextval, #{fk_board_seq}, #{fk_employee_seq}, default, #{content}, default, default, #{parent_seq}, #{depthno}+1)
	</insert>
	<!-- 해당 댓글의 게시물에 댓글 수 +1 증가 -->
	<update id="updateChildCommentCnt" parameterType="String">
		update board_table set commentCnt = commentCnt + 1
		where fk_category_num = 3 and board_seq = #{fk_board_seq}
	</update>
	
	
	
	<!-- 게시글 수정 - 삭제할 파일 조회 -->
	<select id="deleteFileList" parameterType="HashMap" resultType="com.spring.groupware.commonVO.AttachFileVO">
		select file_seq, fileName, orgFileName, fileSize, fk_board_seq 
		from attachFile_table where fk_board_seq = #{board_seq} 
		<if test="maintainSeq != null">
			<foreach collection="maintainSeq" index="i" open="and not file_seq in(" separator="," close=")">
				${maintainSeq[i]}
			</foreach>
		</if>
	</select>
	
	
	<!-- 게시글 수정 - 첨부파일 삭제 -->
	<delete id="deleteFile" parameterType="HashMap">
		delete from attachFile_table where file_seq in 
		<foreach collection="deleteFileList" item="deleteFile" open="(" separator="," close=")">
			${deleteFile.file_seq}
		</foreach>
	</delete>
	
	
	<!-- 게시글 수정 - 첨부파일 추가 -->
	<insert id="insertFile" parameterType="com.spring.groupware.commonVO.AttachFileVO">
		insert into attachFile_table(file_seq, fk_board_seq, fileName, orgFileName, fileSize)
		values(attachFile_table_seq.nextval, #{fk_board_seq}, #{fileName}, #{orgFileName}, #{fileSize})
	</insert>
	
	
</mapper>