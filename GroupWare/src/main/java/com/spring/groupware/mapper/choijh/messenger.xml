<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="messenger">

	<!-- 로그인 한 사원 정보를 제외한 모든 사원 정보 불러오기 -->
	<select id="allEmployeeView" parameterType="String" resultType="com.spring.groupware.commonVO.EmployeesVO">
		select employee_seq, employee_name, position_name, department_name
		from
		(
		    select E.employee_seq, employee_name, P.position_name, E.fk_department, P.position_seq
		    from employees_table E join position_table P
		    on   E.fk_position = P.position_seq
		) V join department_table D
		on  V.fk_department = D.department_seq
		where employee_seq != #{employee_seq} 
		order by V.position_seq
	</select>


	<!-- 채팅 방 존재유무 조회하기 -->
	<select id="roomExist" parameterType="HashMap" resultType="String">
		select roomNumber
		from
		(
		select roomNumber, count(*) AS cnt
		from messengerRoom_table
		where roomNumber in (select roomNumber
		                     from messengerRoom_table 
		                     where roomNumber in(select roomNumber from messengerRoom_table where fk_employee_seq = #{sEmployee_seq})
		                           and
		                           fk_employee_seq = #{rEmployee_seq})
		group by roomNumber 
		) V    
		where V.cnt = 2
	</select>
	
	
	<!-- 채팅 방 번호 채번해오기 -->
	<select id="getRoomNumber" resultType="int">
		select messengerRoom_table_seq.nextval
		from dual
	</select>


	<!-- 채팅방 만들기 -->
	<insert id="createRoom_S" parameterType="HashMap">
		insert into messengerRoom_table(roomNumber, fk_employee_seq, regDate)
		values(#{roomNum}, #{sEmployee_seq}, default)
	</insert>
	<insert id="createRoom_R" parameterType="HashMap">
		insert into messengerRoom_table(roomNumber, fk_employee_seq, regDate)
		values(#{roomNum}, #{rEmployee_seq}, default)
	</insert>
	
	
	<!-- 채팅방 내용 읽어오기 -->
	<select id="contentView" parameterType="String" resultType="com.spring.groupware.commonVO.MessengerVO">
		select message_seq, content, to_char(M.regDate, 'mm-dd hh24:mi')AS regDate, status, fk_roomNumber, fk_employee_seq, employee_name
		from messenger_table M join employees_table E
		on fk_employee_seq = employee_seq
		where fk_roomNumber = #{roomNumber}
		order by M.regDate
	</select>
	
	
	<!-- 채팅방 글쓰기 -->
	<insert id="goWriteMsg" parameterType="HashMap">
		insert into messenger_table(message_seq, content, regDate, status, fk_roomNumber, fk_employee_seq)
		values(messenger_table_seq.nextval, #{content}, default, default, #{roomNumber}, #{sEmployee_seq})
	</insert>
	
	
	<!-- 대화목록 보여주기 -->
	<resultMap type="HashMap" id="roomMap">
		<result property="roomNumber" 		column="roomNumber" 		javaType="String" />
		<result property="fk_employee_seq" 	column="fk_employee_seq" 	javaType="String" />
		<result property="employee_name" 	column="employee_name" 		javaType="String" />
		<result property="content" 			column="content" 			javaType="String" />
		<result property="regDate" 			column="regDate" 			javaType="String" />
	</resultMap>
	<select id="msgRoomListView" parameterType="String" resultMap="roomMap">
		select V.roomNumber, V.fk_employee_seq, V.employee_name, M.content, to_char(M.regdate,'yyyy-mm-dd hh24:mi:ss') As regDate
		from
		(
		select  R.roomNumber, R.fk_employee_seq, E.employee_name
		from messengerRoom_table R join employees_table E
		on   R.fk_employee_seq = E.employee_seq
		where fk_employee_seq != #{employee_seq}
		) V join messenger_table M
		on V.roomNumber = M.fk_roomNumber
		where regDate in (select max(regDate) from messenger_table group by fk_roomNumber)
		order by regDate desc
	</select>
	
</mapper>