<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="messenger">

	<!-- 로그인 한 사원 정보를 제외한 모든 사원 정보 불러오기 -->
	<select id="allEmployeeView" parameterType="String" resultType="com.spring.groupware.commonVO.EmployeesVO">
		select employee_seq, employee_name, position_name, department_name
		from
		(
		    select E.employee_seq, employee_name, P.position_name, E.fk_department, P.position_seq
		    from employees_table E join position_table P
		    on   E.fk_position = P.position_seq
		) V join department_table D
		on  V.fk_department = D.department_seq
		where employee_seq != #{employee_seq} 
		order by V.position_seq
	</select>


	<!-- 채팅 방 존재유무 조회하기 -->
	<select id="roomExist" parameterType="HashMap" resultType="String">
		select roomNumber
		from
		(
		select roomNumber, count(*) AS cnt
		from messengerRoom_table
		where roomNumber in (select roomNumber
		                     from messengerRoom_table 
		                     where roomNumber in(select roomNumber from messengerRoom_table where fk_employee_seq = #{sEmployee_seq})
		                           and
		                           fk_employee_seq = #{rEmployee_seq})
		group by roomNumber 
		) V    
		where V.cnt = 2
	</select>
	
	
	<!-- 채팅 방 번호 채번해오기 -->
	<select id="getRoomNumber" resultType="int">
		select messengerRoom_table_seq.nextval
		from dual
	</select>


	<!-- 채팅방 만들기 -->
	<insert id="createRoom_S" parameterType="HashMap">
		insert into messengerRoom_table(roomNumber, fk_employee_seq, regDate)
		values(#{roomNum}, #{sEmployee_seq}, default)
	</insert>
	<insert id="createRoom_R" parameterType="HashMap">
		insert into messengerRoom_table(roomNumber, fk_employee_seq, regDate)
		values(#{roomNum}, #{rEmployee_seq}, default)
	</insert>
	
	
	<!-- 채팅방 내용 읽어오기 -->
	<select id="contentView" parameterType="String" resultType="com.spring.groupware.commonVO.MessengerVO">
		select message_seq, content, to_char(M.regDate, 'mm-dd hh24:mi')AS regDate, status, fk_roomNumber, fk_employee_seq, employee_name
		from messenger_table M join employees_table E
		on fk_employee_seq = employee_seq
		where fk_roomNumber = #{roomNumber}
		order by M.regDate
	</select>
	
	
	<!-- 채팅방 글쓰기 -->
	<insert id="goWriteMsg" parameterType="HashMap">
		insert into messenger_table(message_seq, content, regDate, status, fk_roomNumber, fk_employee_seq)
		values(messenger_table_seq.nextval, #{content}, default, default, #{roomNumber}, #{sEmployee_seq})
	</insert>
	
	
	<!-- 대화목록 보여주기 -->
	<resultMap type="HashMap" id="roomMap">
		<result property="roomNumber" 		column="roomNumber" 		javaType="String" />
		<result property="fk_employee_seq" 	column="fk_employee_seq" 	javaType="String" />
		<result property="employee_name" 	column="employee_name" 		javaType="String" />
		<result property="content" 			column="content" 			javaType="String" />
		<result property="regDate" 			column="regDate" 			javaType="String" />
		<result property="cnt" 				column="cnt" 				javaType="String" />
	</resultMap>
	<select id="msgRoomListView" parameterType="HashMap" resultMap="roomMap">
		select X.roomNumber, X.cnt, X.fk_employee_seq, E.employee_name, X.content, to_char(X.regDate, 'mm-dd hh24:mi') AS regDate
		from
		(
		    select T.roomNumber, T.cnt, Z.fk_employee_seq, T.content, T.regDate
		    from 
		    (
		        select V.roomNumber, V.cnt, M.fk_employee_seq, M.content, M.regDate
		        from 
		        (
		            select roomNumber, count(*) AS cnt
		            from messengerRoom_table
		            group by roomNumber
		        ) V join messenger_table M
		        on V.roomNumber = M.fk_roomNumber
		        where M.regDate in (select max(regDate) from messenger_table group by fk_roomNumber)
		              and roomNumber = #{roomNumber}
		    ) T join ( select roomNumber, max(fk_employee_seq) AS fk_employee_seq 
		               from messengerRoom_table
		               where fk_employee_seq != #{Employee_seq}
		               group by roomNumber having count(*) > 0
		               UNION
		               select roomNumber, max(fk_employee_seq) AS fk_employee_seq
		               from messengerRoom_table
		               group by roomNumber having count(*) = 1) Z
		    on T.roomNumber = Z.roomNumber
		) X join employees_table E
		on X.fk_employee_seq = E.employee_seq
		where X.roomNumber in (select roomNumber from messengerRoom_table where fk_employee_seq = #{roomNumber})
	</select>
	
	<!-- 채팅 방 삭제하기 -->
	<delete id="roomDelete" parameterType="HashMap">
		delete from messengerRoom_table 
		where roomNumber = #{roomNumber} and fk_employee_seq = #{sEmployee_seq}
	</delete>
	
	
	<!-- 채팅방 나갈시 메시지 띄우기 -->
	<insert id="roomOutMsgInsert" parameterType="HashMap">
		insert into messenger_table(message_seq, content, regDate, status, fk_roomNumber, fk_employee_seq)
		values(messenger_table_seq.nextval, #{content}, default, 0, #{roomNumber}, #{sEmployee_seq})
	</insert>
	
	
	<!-- 그룹채팅 방 생성하기(자신) -->
	<insert id="groupChattRoomCreate_My" parameterType="HashMap">
		insert into messengerRoom_table(roomNumber, fk_employee_seq, regDate)
		values(#{roomNumber}, #{sEmployee_seq}, sysdate)
	</insert>
	
	
	<!-- 그룹채팅 방 생성하기(상대방) -->
	<insert id="groupChattRoomCreate_Other" parameterType="HashMap" >
		insert into messengerRoom_table(roomNumber, fk_employee_seq, regDate)
		values(#{roomNumber}, #{allEmpSeq}, sysdate)
	</insert>
	
	
	<!-- 대화방을 나간 방번호 조회하기 -->
	<resultMap type="HashMap" id="cntMap">
		<result property="roomNumber" 	column="roomNumber" javaType="String" />
		<result property="cnt" 			column="cnt" 		javaType="String" />
	</resultMap>
	<select id="selectCnt" parameterType="String" resultMap="cntMap">
		select roomNumber, count(*) AS cnt
		from messengerRoom_table
		where roomNumber in (select roomNumber from messengerRoom_table where fk_employee_seq = #{employee_seq})
		group by roomNumber
	</select>
	
	
	
	
</mapper>